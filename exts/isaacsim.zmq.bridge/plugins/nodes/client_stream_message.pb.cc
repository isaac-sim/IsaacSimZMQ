// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_stream_message.proto

#include "client_stream_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr BBox2DType::BBox2DType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : semanticid_(0u)
  , xmin_(0)
  , ymin_(0)
  , xmax_(0)
  , ymax_(0)
  , occlusionratio_(0){}
struct BBox2DTypeDefaultTypeInternal {
  constexpr BBox2DTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBox2DTypeDefaultTypeInternal() {}
  union {
    BBox2DType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBox2DTypeDefaultTypeInternal _BBox2DType_default_instance_;
constexpr BBox2DInfo_IdToLabelsEntry_DoNotUse::BBox2DInfo_IdToLabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BBox2DInfo_IdToLabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBox2DInfo_IdToLabelsEntry_DoNotUseDefaultTypeInternal _BBox2DInfo_IdToLabelsEntry_DoNotUse_default_instance_;
constexpr BBox2DInfo::BBox2DInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idtolabels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , bboxids_()
  , _bboxids_cached_byte_size_(0){}
struct BBox2DInfoDefaultTypeInternal {
  constexpr BBox2DInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBox2DInfoDefaultTypeInternal() {}
  union {
    BBox2DInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBox2DInfoDefaultTypeInternal _BBox2DInfo_default_instance_;
constexpr BBox2D::BBox2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , info_(nullptr){}
struct BBox2DDefaultTypeInternal {
  constexpr BBox2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBox2DDefaultTypeInternal() {}
  union {
    BBox2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBox2DDefaultTypeInternal _BBox2D_default_instance_;
constexpr Clock::Clock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sim_dt_(0)
  , sys_dt_(0)
  , sim_time_(0)
  , sys_time_(0){}
struct ClockDefaultTypeInternal {
  constexpr ClockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClockDefaultTypeInternal() {}
  union {
    Clock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClockDefaultTypeInternal _Clock_default_instance_;
constexpr Camera::Camera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_matrix_ros_()
  , camera_scale_()
  , intrinsics_matrix_(){}
struct CameraDefaultTypeInternal {
  constexpr CameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDefaultTypeInternal _Camera_default_instance_;
constexpr ClientStreamMessage::ClientStreamMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depth_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bbox2d_(nullptr)
  , clock_(nullptr)
  , camera_(nullptr){}
struct ClientStreamMessageDefaultTypeInternal {
  constexpr ClientStreamMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientStreamMessageDefaultTypeInternal() {}
  union {
    ClientStreamMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientStreamMessageDefaultTypeInternal _ClientStreamMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fstream_5fmessage_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_client_5fstream_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fstream_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_client_5fstream_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBox2DType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BBox2DType, semanticid_),
  PROTOBUF_FIELD_OFFSET(::BBox2DType, xmin_),
  PROTOBUF_FIELD_OFFSET(::BBox2DType, ymin_),
  PROTOBUF_FIELD_OFFSET(::BBox2DType, xmax_),
  PROTOBUF_FIELD_OFFSET(::BBox2DType, ymax_),
  PROTOBUF_FIELD_OFFSET(::BBox2DType, occlusionratio_),
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo_IdToLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo_IdToLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo_IdToLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo_IdToLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo, idtolabels_),
  PROTOBUF_FIELD_OFFSET(::BBox2DInfo, bboxids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BBox2D, data_),
  PROTOBUF_FIELD_OFFSET(::BBox2D, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Clock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Clock, sim_dt_),
  PROTOBUF_FIELD_OFFSET(::Clock, sys_dt_),
  PROTOBUF_FIELD_OFFSET(::Clock, sim_time_),
  PROTOBUF_FIELD_OFFSET(::Clock, sys_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Camera, view_matrix_ros_),
  PROTOBUF_FIELD_OFFSET(::Camera, camera_scale_),
  PROTOBUF_FIELD_OFFSET(::Camera, intrinsics_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, bbox2d_),
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, clock_),
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, camera_),
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, color_image_),
  PROTOBUF_FIELD_OFFSET(::ClientStreamMessage, depth_image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BBox2DType)},
  { 12, 20, -1, sizeof(::BBox2DInfo_IdToLabelsEntry_DoNotUse)},
  { 22, -1, -1, sizeof(::BBox2DInfo)},
  { 30, -1, -1, sizeof(::BBox2D)},
  { 38, -1, -1, sizeof(::Clock)},
  { 48, -1, -1, sizeof(::Camera)},
  { 57, -1, -1, sizeof(::ClientStreamMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBox2DType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBox2DInfo_IdToLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBox2DInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBox2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Clock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientStreamMessage_default_instance_),
};

const char descriptor_table_protodef_client_5fstream_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033client_stream_message.proto\"p\n\nBBox2DT"
  "ype\022\022\n\nsemanticId\030\001 \001(\r\022\014\n\004xMin\030\002 \001(\005\022\014\n"
  "\004yMin\030\003 \001(\005\022\014\n\004xMax\030\004 \001(\005\022\014\n\004yMax\030\005 \001(\005\022"
  "\026\n\016occlusionRatio\030\006 \001(\002\"\201\001\n\nBBox2DInfo\022/"
  "\n\nidToLabels\030\001 \003(\0132\033.BBox2DInfo.IdToLabe"
  "lsEntry\022\017\n\007bboxIds\030\002 \003(\005\0321\n\017IdToLabelsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\">\n\006B"
  "Box2D\022\031\n\004data\030\001 \003(\0132\013.BBox2DType\022\031\n\004info"
  "\030\002 \001(\0132\013.BBox2DInfo\"K\n\005Clock\022\016\n\006sim_dt\030\001"
  " \001(\001\022\016\n\006sys_dt\030\002 \001(\001\022\020\n\010sim_time\030\003 \001(\001\022\020"
  "\n\010sys_time\030\004 \001(\001\"R\n\006Camera\022\027\n\017view_matri"
  "x_ros\030\001 \003(\001\022\024\n\014camera_scale\030\002 \003(\001\022\031\n\021int"
  "rinsics_matrix\030\003 \003(\001\"\210\001\n\023ClientStreamMes"
  "sage\022\027\n\006bbox2d\030\001 \001(\0132\007.BBox2D\022\025\n\005clock\030\002"
  " \001(\0132\006.Clock\022\027\n\006camera\030\003 \001(\0132\007.Camera\022\023\n"
  "\013color_image\030\004 \001(\014\022\023\n\013depth_image\030\005 \001(\014b"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fstream_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fstream_5fmessage_2eproto = {
  false, false, 647, descriptor_table_protodef_client_5fstream_5fmessage_2eproto, "client_stream_message.proto", 
  &descriptor_table_client_5fstream_5fmessage_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_client_5fstream_5fmessage_2eproto::offsets,
  file_level_metadata_client_5fstream_5fmessage_2eproto, file_level_enum_descriptors_client_5fstream_5fmessage_2eproto, file_level_service_descriptors_client_5fstream_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_5fstream_5fmessage_2eproto_getter() {
  return &descriptor_table_client_5fstream_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_5fstream_5fmessage_2eproto(&descriptor_table_client_5fstream_5fmessage_2eproto);

// ===================================================================

class BBox2DType::_Internal {
 public:
};

BBox2DType::BBox2DType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BBox2DType)
}
BBox2DType::BBox2DType(const BBox2DType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&semanticid_, &from.semanticid_,
    static_cast<size_t>(reinterpret_cast<char*>(&occlusionratio_) -
    reinterpret_cast<char*>(&semanticid_)) + sizeof(occlusionratio_));
  // @@protoc_insertion_point(copy_constructor:BBox2DType)
}

inline void BBox2DType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&semanticid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&occlusionratio_) -
    reinterpret_cast<char*>(&semanticid_)) + sizeof(occlusionratio_));
}

BBox2DType::~BBox2DType() {
  // @@protoc_insertion_point(destructor:BBox2DType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BBox2DType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BBox2DType::ArenaDtor(void* object) {
  BBox2DType* _this = reinterpret_cast< BBox2DType* >(object);
  (void)_this;
}
void BBox2DType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBox2DType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBox2DType::Clear() {
// @@protoc_insertion_point(message_clear_start:BBox2DType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&semanticid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occlusionratio_) -
      reinterpret_cast<char*>(&semanticid_)) + sizeof(occlusionratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox2DType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 semanticId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          semanticid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xMin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yMin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xMax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yMax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float occlusionRatio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          occlusionratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBox2DType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBox2DType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 semanticId = 1;
  if (this->_internal_semanticid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_semanticid(), target);
  }

  // int32 xMin = 2;
  if (this->_internal_xmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xmin(), target);
  }

  // int32 yMin = 3;
  if (this->_internal_ymin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ymin(), target);
  }

  // int32 xMax = 4;
  if (this->_internal_xmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_xmax(), target);
  }

  // int32 yMax = 5;
  if (this->_internal_ymax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ymax(), target);
  }

  // float occlusionRatio = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_occlusionratio = this->_internal_occlusionratio();
  uint32_t raw_occlusionratio;
  memcpy(&raw_occlusionratio, &tmp_occlusionratio, sizeof(tmp_occlusionratio));
  if (raw_occlusionratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_occlusionratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBox2DType)
  return target;
}

size_t BBox2DType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBox2DType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 semanticId = 1;
  if (this->_internal_semanticid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_semanticid());
  }

  // int32 xMin = 2;
  if (this->_internal_xmin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_xmin());
  }

  // int32 yMin = 3;
  if (this->_internal_ymin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ymin());
  }

  // int32 xMax = 4;
  if (this->_internal_xmax() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_xmax());
  }

  // int32 yMax = 5;
  if (this->_internal_ymax() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ymax());
  }

  // float occlusionRatio = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_occlusionratio = this->_internal_occlusionratio();
  uint32_t raw_occlusionratio;
  memcpy(&raw_occlusionratio, &tmp_occlusionratio, sizeof(tmp_occlusionratio));
  if (raw_occlusionratio != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBox2DType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBox2DType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBox2DType::GetClassData() const { return &_class_data_; }

void BBox2DType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBox2DType *>(to)->MergeFrom(
      static_cast<const BBox2DType &>(from));
}


void BBox2DType::MergeFrom(const BBox2DType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBox2DType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_semanticid() != 0) {
    _internal_set_semanticid(from._internal_semanticid());
  }
  if (from._internal_xmin() != 0) {
    _internal_set_xmin(from._internal_xmin());
  }
  if (from._internal_ymin() != 0) {
    _internal_set_ymin(from._internal_ymin());
  }
  if (from._internal_xmax() != 0) {
    _internal_set_xmax(from._internal_xmax());
  }
  if (from._internal_ymax() != 0) {
    _internal_set_ymax(from._internal_ymax());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_occlusionratio = from._internal_occlusionratio();
  uint32_t raw_occlusionratio;
  memcpy(&raw_occlusionratio, &tmp_occlusionratio, sizeof(tmp_occlusionratio));
  if (raw_occlusionratio != 0) {
    _internal_set_occlusionratio(from._internal_occlusionratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBox2DType::CopyFrom(const BBox2DType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBox2DType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2DType::IsInitialized() const {
  return true;
}

void BBox2DType::InternalSwap(BBox2DType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox2DType, occlusionratio_)
      + sizeof(BBox2DType::occlusionratio_)
      - PROTOBUF_FIELD_OFFSET(BBox2DType, semanticid_)>(
          reinterpret_cast<char*>(&semanticid_),
          reinterpret_cast<char*>(&other->semanticid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox2DType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[0]);
}

// ===================================================================

BBox2DInfo_IdToLabelsEntry_DoNotUse::BBox2DInfo_IdToLabelsEntry_DoNotUse() {}
BBox2DInfo_IdToLabelsEntry_DoNotUse::BBox2DInfo_IdToLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BBox2DInfo_IdToLabelsEntry_DoNotUse::MergeFrom(const BBox2DInfo_IdToLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BBox2DInfo_IdToLabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[1]);
}

// ===================================================================

class BBox2DInfo::_Internal {
 public:
};

BBox2DInfo::BBox2DInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  idtolabels_(arena),
  bboxids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BBox2DInfo)
}
BBox2DInfo::BBox2DInfo(const BBox2DInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bboxids_(from.bboxids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idtolabels_.MergeFrom(from.idtolabels_);
  // @@protoc_insertion_point(copy_constructor:BBox2DInfo)
}

inline void BBox2DInfo::SharedCtor() {
}

BBox2DInfo::~BBox2DInfo() {
  // @@protoc_insertion_point(destructor:BBox2DInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BBox2DInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BBox2DInfo::ArenaDtor(void* object) {
  BBox2DInfo* _this = reinterpret_cast< BBox2DInfo* >(object);
  (void)_this;
  _this->idtolabels_. ~MapField();
}
inline void BBox2DInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &BBox2DInfo::ArenaDtor);
  }
}
void BBox2DInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBox2DInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BBox2DInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idtolabels_.Clear();
  bboxids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox2DInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> idToLabels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&idtolabels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bboxIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bboxids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_bboxids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBox2DInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBox2DInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> idToLabels = 1;
  if (!this->_internal_idtolabels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BBox2DInfo.IdToLabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BBox2DInfo.IdToLabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_idtolabels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_idtolabels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_idtolabels().begin();
          it != this->_internal_idtolabels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BBox2DInfo_IdToLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_idtolabels().begin();
          it != this->_internal_idtolabels().end(); ++it) {
        target = BBox2DInfo_IdToLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated int32 bboxIds = 2;
  {
    int byte_size = _bboxids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bboxids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBox2DInfo)
  return target;
}

size_t BBox2DInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBox2DInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> idToLabels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_idtolabels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_idtolabels().begin();
      it != this->_internal_idtolabels().end(); ++it) {
    total_size += BBox2DInfo_IdToLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 bboxIds = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bboxids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bboxids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBox2DInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBox2DInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBox2DInfo::GetClassData() const { return &_class_data_; }

void BBox2DInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBox2DInfo *>(to)->MergeFrom(
      static_cast<const BBox2DInfo &>(from));
}


void BBox2DInfo::MergeFrom(const BBox2DInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBox2DInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  idtolabels_.MergeFrom(from.idtolabels_);
  bboxids_.MergeFrom(from.bboxids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBox2DInfo::CopyFrom(const BBox2DInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBox2DInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2DInfo::IsInitialized() const {
  return true;
}

void BBox2DInfo::InternalSwap(BBox2DInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  idtolabels_.InternalSwap(&other->idtolabels_);
  bboxids_.InternalSwap(&other->bboxids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox2DInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[2]);
}

// ===================================================================

class BBox2D::_Internal {
 public:
  static const ::BBox2DInfo& info(const BBox2D* msg);
};

const ::BBox2DInfo&
BBox2D::_Internal::info(const BBox2D* msg) {
  return *msg->info_;
}
BBox2D::BBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BBox2D)
}
BBox2D::BBox2D(const BBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::BBox2DInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BBox2D)
}

inline void BBox2D::SharedCtor() {
info_ = nullptr;
}

BBox2D::~BBox2D() {
  // @@protoc_insertion_point(destructor:BBox2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void BBox2D::ArenaDtor(void* object) {
  BBox2D* _this = reinterpret_cast< BBox2D* >(object);
  (void)_this;
}
void BBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:BBox2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .BBox2DType data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .BBox2DInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBox2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBox2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BBox2DType data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  // .BBox2DInfo info = 2;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBox2D)
  return target;
}

size_t BBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBox2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BBox2DType data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BBox2DInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBox2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBox2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBox2D::GetClassData() const { return &_class_data_; }

void BBox2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBox2D *>(to)->MergeFrom(
      static_cast<const BBox2D &>(from));
}


void BBox2D::MergeFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_has_info()) {
    _internal_mutable_info()->::BBox2DInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBox2D::CopyFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2D::IsInitialized() const {
  return true;
}

void BBox2D::InternalSwap(BBox2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[3]);
}

// ===================================================================

class Clock::_Internal {
 public:
};

Clock::Clock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Clock)
}
Clock::Clock(const Clock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sim_dt_, &from.sim_dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&sys_time_) -
    reinterpret_cast<char*>(&sim_dt_)) + sizeof(sys_time_));
  // @@protoc_insertion_point(copy_constructor:Clock)
}

inline void Clock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sim_dt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sys_time_) -
    reinterpret_cast<char*>(&sim_dt_)) + sizeof(sys_time_));
}

Clock::~Clock() {
  // @@protoc_insertion_point(destructor:Clock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Clock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Clock::ArenaDtor(void* object) {
  Clock* _this = reinterpret_cast< Clock* >(object);
  (void)_this;
}
void Clock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Clock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Clock::Clear() {
// @@protoc_insertion_point(message_clear_start:Clock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sim_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sys_time_) -
      reinterpret_cast<char*>(&sim_dt_)) + sizeof(sys_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Clock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double sim_dt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          sim_dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sys_dt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          sys_dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sim_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          sim_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sys_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          sys_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Clock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Clock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double sim_dt = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_dt = this->_internal_sim_dt();
  uint64_t raw_sim_dt;
  memcpy(&raw_sim_dt, &tmp_sim_dt, sizeof(tmp_sim_dt));
  if (raw_sim_dt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sim_dt(), target);
  }

  // double sys_dt = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_dt = this->_internal_sys_dt();
  uint64_t raw_sys_dt;
  memcpy(&raw_sys_dt, &tmp_sys_dt, sizeof(tmp_sys_dt));
  if (raw_sys_dt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sys_dt(), target);
  }

  // double sim_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_time = this->_internal_sim_time();
  uint64_t raw_sim_time;
  memcpy(&raw_sim_time, &tmp_sim_time, sizeof(tmp_sim_time));
  if (raw_sim_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sim_time(), target);
  }

  // double sys_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_time = this->_internal_sys_time();
  uint64_t raw_sys_time;
  memcpy(&raw_sys_time, &tmp_sys_time, sizeof(tmp_sys_time));
  if (raw_sys_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_sys_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Clock)
  return target;
}

size_t Clock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Clock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sim_dt = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_dt = this->_internal_sim_dt();
  uint64_t raw_sim_dt;
  memcpy(&raw_sim_dt, &tmp_sim_dt, sizeof(tmp_sim_dt));
  if (raw_sim_dt != 0) {
    total_size += 1 + 8;
  }

  // double sys_dt = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_dt = this->_internal_sys_dt();
  uint64_t raw_sys_dt;
  memcpy(&raw_sys_dt, &tmp_sys_dt, sizeof(tmp_sys_dt));
  if (raw_sys_dt != 0) {
    total_size += 1 + 8;
  }

  // double sim_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_time = this->_internal_sim_time();
  uint64_t raw_sim_time;
  memcpy(&raw_sim_time, &tmp_sim_time, sizeof(tmp_sim_time));
  if (raw_sim_time != 0) {
    total_size += 1 + 8;
  }

  // double sys_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_time = this->_internal_sys_time();
  uint64_t raw_sys_time;
  memcpy(&raw_sys_time, &tmp_sys_time, sizeof(tmp_sys_time));
  if (raw_sys_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Clock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Clock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Clock::GetClassData() const { return &_class_data_; }

void Clock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Clock *>(to)->MergeFrom(
      static_cast<const Clock &>(from));
}


void Clock::MergeFrom(const Clock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Clock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_dt = from._internal_sim_dt();
  uint64_t raw_sim_dt;
  memcpy(&raw_sim_dt, &tmp_sim_dt, sizeof(tmp_sim_dt));
  if (raw_sim_dt != 0) {
    _internal_set_sim_dt(from._internal_sim_dt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_dt = from._internal_sys_dt();
  uint64_t raw_sys_dt;
  memcpy(&raw_sys_dt, &tmp_sys_dt, sizeof(tmp_sys_dt));
  if (raw_sys_dt != 0) {
    _internal_set_sys_dt(from._internal_sys_dt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim_time = from._internal_sim_time();
  uint64_t raw_sim_time;
  memcpy(&raw_sim_time, &tmp_sim_time, sizeof(tmp_sim_time));
  if (raw_sim_time != 0) {
    _internal_set_sim_time(from._internal_sim_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys_time = from._internal_sys_time();
  uint64_t raw_sys_time;
  memcpy(&raw_sys_time, &tmp_sys_time, sizeof(tmp_sys_time));
  if (raw_sys_time != 0) {
    _internal_set_sys_time(from._internal_sys_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Clock::CopyFrom(const Clock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Clock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clock::IsInitialized() const {
  return true;
}

void Clock::InternalSwap(Clock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Clock, sys_time_)
      + sizeof(Clock::sys_time_)
      - PROTOBUF_FIELD_OFFSET(Clock, sim_dt_)>(
          reinterpret_cast<char*>(&sim_dt_),
          reinterpret_cast<char*>(&other->sim_dt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Clock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[4]);
}

// ===================================================================

class Camera::_Internal {
 public:
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  view_matrix_ros_(arena),
  camera_scale_(arena),
  intrinsics_matrix_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      view_matrix_ros_(from.view_matrix_ros_),
      camera_scale_(from.camera_scale_),
      intrinsics_matrix_(from.intrinsics_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Camera)
}

inline void Camera::SharedCtor() {
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:Camera)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:Camera)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_matrix_ros_.Clear();
  camera_scale_.Clear();
  intrinsics_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double view_matrix_ros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_view_matrix_ros(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_view_matrix_ros(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double camera_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_camera_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_camera_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double intrinsics_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_intrinsics_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_intrinsics_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Camera::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Camera)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double view_matrix_ros = 1;
  if (this->_internal_view_matrix_ros_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_view_matrix_ros(), target);
  }

  // repeated double camera_scale = 2;
  if (this->_internal_camera_scale_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_camera_scale(), target);
  }

  // repeated double intrinsics_matrix = 3;
  if (this->_internal_intrinsics_matrix_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_intrinsics_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Camera)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double view_matrix_ros = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_view_matrix_ros_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double camera_scale = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camera_scale_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double intrinsics_matrix = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intrinsics_matrix_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Camera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Camera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Camera::GetClassData() const { return &_class_data_; }

void Camera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Camera *>(to)->MergeFrom(
      static_cast<const Camera &>(from));
}


void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Camera)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  view_matrix_ros_.MergeFrom(from.view_matrix_ros_);
  camera_scale_.MergeFrom(from.camera_scale_);
  intrinsics_matrix_.MergeFrom(from.intrinsics_matrix_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  view_matrix_ros_.InternalSwap(&other->view_matrix_ros_);
  camera_scale_.InternalSwap(&other->camera_scale_);
  intrinsics_matrix_.InternalSwap(&other->intrinsics_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[5]);
}

// ===================================================================

class ClientStreamMessage::_Internal {
 public:
  static const ::BBox2D& bbox2d(const ClientStreamMessage* msg);
  static const ::Clock& clock(const ClientStreamMessage* msg);
  static const ::Camera& camera(const ClientStreamMessage* msg);
};

const ::BBox2D&
ClientStreamMessage::_Internal::bbox2d(const ClientStreamMessage* msg) {
  return *msg->bbox2d_;
}
const ::Clock&
ClientStreamMessage::_Internal::clock(const ClientStreamMessage* msg) {
  return *msg->clock_;
}
const ::Camera&
ClientStreamMessage::_Internal::camera(const ClientStreamMessage* msg) {
  return *msg->camera_;
}
ClientStreamMessage::ClientStreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientStreamMessage)
}
ClientStreamMessage::ClientStreamMessage(const ClientStreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color_image().empty()) {
    color_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color_image(), 
      GetArenaForAllocation());
  }
  depth_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    depth_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depth_image().empty()) {
    depth_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depth_image(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bbox2d()) {
    bbox2d_ = new ::BBox2D(*from.bbox2d_);
  } else {
    bbox2d_ = nullptr;
  }
  if (from._internal_has_clock()) {
    clock_ = new ::Clock(*from.clock_);
  } else {
    clock_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClientStreamMessage)
}

inline void ClientStreamMessage::SharedCtor() {
color_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
depth_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  depth_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bbox2d_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&camera_) -
    reinterpret_cast<char*>(&bbox2d_)) + sizeof(camera_));
}

ClientStreamMessage::~ClientStreamMessage() {
  // @@protoc_insertion_point(destructor:ClientStreamMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientStreamMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  color_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depth_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox2d_;
  if (this != internal_default_instance()) delete clock_;
  if (this != internal_default_instance()) delete camera_;
}

void ClientStreamMessage::ArenaDtor(void* object) {
  ClientStreamMessage* _this = reinterpret_cast< ClientStreamMessage* >(object);
  (void)_this;
}
void ClientStreamMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientStreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientStreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientStreamMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_image_.ClearToEmpty();
  depth_image_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bbox2d_ != nullptr) {
    delete bbox2d_;
  }
  bbox2d_ = nullptr;
  if (GetArenaForAllocation() == nullptr && clock_ != nullptr) {
    delete clock_;
  }
  clock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BBox2D bbox2d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox2d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Clock clock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Camera camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes color_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_color_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes depth_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_depth_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientStreamMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientStreamMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BBox2D bbox2d = 1;
  if (this->_internal_has_bbox2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bbox2d(this), target, stream);
  }

  // .Clock clock = 2;
  if (this->_internal_has_clock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clock(this), target, stream);
  }

  // .Camera camera = 3;
  if (this->_internal_has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::camera(this), target, stream);
  }

  // bytes color_image = 4;
  if (!this->_internal_color_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_color_image(), target);
  }

  // bytes depth_image = 5;
  if (!this->_internal_depth_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_depth_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientStreamMessage)
  return target;
}

size_t ClientStreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientStreamMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes color_image = 4;
  if (!this->_internal_color_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_color_image());
  }

  // bytes depth_image = 5;
  if (!this->_internal_depth_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_depth_image());
  }

  // .BBox2D bbox2d = 1;
  if (this->_internal_has_bbox2d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox2d_);
  }

  // .Clock clock = 2;
  if (this->_internal_has_clock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clock_);
  }

  // .Camera camera = 3;
  if (this->_internal_has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientStreamMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientStreamMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientStreamMessage::GetClassData() const { return &_class_data_; }

void ClientStreamMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientStreamMessage *>(to)->MergeFrom(
      static_cast<const ClientStreamMessage &>(from));
}


void ClientStreamMessage::MergeFrom(const ClientStreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientStreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color_image().empty()) {
    _internal_set_color_image(from._internal_color_image());
  }
  if (!from._internal_depth_image().empty()) {
    _internal_set_depth_image(from._internal_depth_image());
  }
  if (from._internal_has_bbox2d()) {
    _internal_mutable_bbox2d()->::BBox2D::MergeFrom(from._internal_bbox2d());
  }
  if (from._internal_has_clock()) {
    _internal_mutable_clock()->::Clock::MergeFrom(from._internal_clock());
  }
  if (from._internal_has_camera()) {
    _internal_mutable_camera()->::Camera::MergeFrom(from._internal_camera());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientStreamMessage::CopyFrom(const ClientStreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientStreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStreamMessage::IsInitialized() const {
  return true;
}

void ClientStreamMessage::InternalSwap(ClientStreamMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_image_, lhs_arena,
      &other->color_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &depth_image_, lhs_arena,
      &other->depth_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientStreamMessage, camera_)
      + sizeof(ClientStreamMessage::camera_)
      - PROTOBUF_FIELD_OFFSET(ClientStreamMessage, bbox2d_)>(
          reinterpret_cast<char*>(&bbox2d_),
          reinterpret_cast<char*>(&other->bbox2d_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStreamMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fstream_5fmessage_2eproto_getter, &descriptor_table_client_5fstream_5fmessage_2eproto_once,
      file_level_metadata_client_5fstream_5fmessage_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BBox2DType* Arena::CreateMaybeMessage< ::BBox2DType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBox2DType >(arena);
}
template<> PROTOBUF_NOINLINE ::BBox2DInfo_IdToLabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::BBox2DInfo_IdToLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBox2DInfo_IdToLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BBox2DInfo* Arena::CreateMaybeMessage< ::BBox2DInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBox2DInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BBox2D* Arena::CreateMaybeMessage< ::BBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::Clock* Arena::CreateMaybeMessage< ::Clock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Clock >(arena);
}
template<> PROTOBUF_NOINLINE ::Camera* Arena::CreateMaybeMessage< ::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientStreamMessage* Arena::CreateMaybeMessage< ::ClientStreamMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientStreamMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
